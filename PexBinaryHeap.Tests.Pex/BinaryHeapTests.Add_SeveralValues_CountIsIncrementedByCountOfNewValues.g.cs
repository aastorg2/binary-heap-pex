// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using PexBinaryHeap;
using Microsoft.Pex.Framework;
using NUnit.Framework;
using Microsoft.Pex.Framework.Generated;
using Microsoft.ExtendedReflection.DataAccess;
using System.Collections.Generic;

namespace PexBinaryHeap.Tests.Pex
{
    public partial class BinaryHeapTests
    {
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues522()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[0];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues418()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues282()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[0] = s0;
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues553()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[2];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues250()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[3];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues844()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[4];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues710()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[5];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
[Ignore("the test state was: path bounds exceeded")]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues957()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[17];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(256, default(int));
    keyValuePairs[0] = s0;
    KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(513, default(int));
    keyValuePairs[1] = s1;
    KeyValuePair<int, int> s2 = new KeyValuePair<int, int>(320, default(int));
    keyValuePairs[2] = s2;
    KeyValuePair<int, int> s3 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[3] = s3;
    KeyValuePair<int, int> s4 = new KeyValuePair<int, int>(64, default(int));
    keyValuePairs[4] = s4;
    KeyValuePair<int, int> s5 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[5] = s5;
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
[Ignore("the test state was: path bounds exceeded")]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues689()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[17];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(900, default(int));
    keyValuePairs[0] = s0;
    KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(929, default(int));
    keyValuePairs[1] = s1;
    KeyValuePair<int, int> s2 = new KeyValuePair<int, int>(1000, default(int));
    keyValuePairs[2] = s2;
    KeyValuePair<int, int> s3 = new KeyValuePair<int, int>(898, default(int));
    keyValuePairs[3] = s3;
    KeyValuePair<int, int> s4 = new KeyValuePair<int, int>(899, default(int));
    keyValuePairs[4] = s4;
    KeyValuePair<int, int> s5 = new KeyValuePair<int, int>(873, default(int));
    keyValuePairs[5] = s5;
    KeyValuePair<int, int> s6 = new KeyValuePair<int, int>(868, default(int));
    keyValuePairs[6] = s6;
    KeyValuePair<int, int> s7 = new KeyValuePair<int, int>(846, default(int));
    keyValuePairs[7] = s7;
    KeyValuePair<int, int> s8 = new KeyValuePair<int, int>(45, default(int));
    keyValuePairs[8] = s8;
    KeyValuePair<int, int> s9 = new KeyValuePair<int, int>(39, default(int));
    keyValuePairs[9] = s9;
    KeyValuePair<int, int> s10 = new KeyValuePair<int, int>(32, default(int));
    keyValuePairs[10] = s10;
    KeyValuePair<int, int> s11 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[11] = s11;
    KeyValuePair<int, int> s12 = new KeyValuePair<int, int>(877, default(int));
    keyValuePairs[15] = s12;
    KeyValuePair<int, int> s13 = new KeyValuePair<int, int>(419, default(int));
    keyValuePairs[16] = s13;
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (keyValuePairs);
}
    }
}
