// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>

using System.Collections.Generic;
using Microsoft.Pex.Framework;
using NUnit.Framework;
using Microsoft.Pex.Framework.Generated;
using Microsoft.ExtendedReflection.DataAccess;

namespace PexBinaryHeap.Tests.Pex
{
    public partial class BinaryHeapTests
    {
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues590()
{
    BinaryHeap<int, int> binaryHeap;
    binaryHeap = BinaryHeapFactory.Create();
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[0];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (binaryHeap, keyValuePairs);
    PexAssert.IsNotNull((object)binaryHeap);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues104()
{
    BinaryHeap<int, int> binaryHeap;
    binaryHeap = BinaryHeapFactory.Create();
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (binaryHeap, keyValuePairs);
    PexAssert.IsNotNull((object)binaryHeap);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues760()
{
    BinaryHeap<int, int> binaryHeap;
    binaryHeap = BinaryHeapFactory.Create();
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[0] = s0;
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (binaryHeap, keyValuePairs);
    PexAssert.IsNotNull((object)binaryHeap);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues176()
{
    BinaryHeap<int, int> binaryHeap;
    binaryHeap = BinaryHeapFactory.Create();
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[2];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (binaryHeap, keyValuePairs);
    PexAssert.IsNotNull((object)binaryHeap);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues955()
{
    BinaryHeap<int, int> binaryHeap;
    binaryHeap = BinaryHeapFactory.Create();
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[2];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[1] = s0;
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (binaryHeap, keyValuePairs);
    PexAssert.IsNotNull((object)binaryHeap);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues808()
{
    BinaryHeap<int, int> binaryHeap;
    binaryHeap = BinaryHeapFactory.Create();
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[3];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (binaryHeap, keyValuePairs);
    PexAssert.IsNotNull((object)binaryHeap);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues485()
{
    BinaryHeap<int, int> binaryHeap;
    binaryHeap = BinaryHeapFactory.Create();
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[5];
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (binaryHeap, keyValuePairs);
    PexAssert.IsNotNull((object)binaryHeap);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues752()
{
    BinaryHeap<int, int> binaryHeap;
    binaryHeap = BinaryHeapFactory.Create();
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[3];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[1] = s0;
    KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(128, default(int));
    keyValuePairs[2] = s1;
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (binaryHeap, keyValuePairs);
    PexAssert.IsNotNull((object)binaryHeap);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
[PexRaisedException(typeof(TermDestructionException))]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValuesThrowsTermDestructionException786()
{
    BinaryHeap<int, int> binaryHeap;
    binaryHeap = BinaryHeapFactory.Create();
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[13];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(9, default(int));
    keyValuePairs[0] = s0;
    KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(64, default(int));
    keyValuePairs[1] = s1;
    KeyValuePair<int, int> s2 = new KeyValuePair<int, int>(84, default(int));
    keyValuePairs[2] = s2;
    KeyValuePair<int, int> s3 = new KeyValuePair<int, int>(9, default(int));
    keyValuePairs[3] = s3;
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (binaryHeap, keyValuePairs);
    PexAssert.IsNotNull((object)binaryHeap);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
[Ignore("the test state was: path bounds exceeded")]
public void Add_SeveralValues_CountIsIncrementedByCountOfNewValues497()
{
    BinaryHeap<int, int> binaryHeap;
    binaryHeap = BinaryHeapFactory.Create();
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[20];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(73, default(int));
    keyValuePairs[0] = s0;
    KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(544, default(int));
    keyValuePairs[1] = s1;
    KeyValuePair<int, int> s2 = new KeyValuePair<int, int>(545, default(int));
    keyValuePairs[2] = s2;
    KeyValuePair<int, int> s3 = new KeyValuePair<int, int>(35, default(int));
    keyValuePairs[3] = s3;
    KeyValuePair<int, int> s4 = new KeyValuePair<int, int>(34, default(int));
    keyValuePairs[4] = s4;
    KeyValuePair<int, int> s5 = new KeyValuePair<int, int>(28, default(int));
    keyValuePairs[5] = s5;
    KeyValuePair<int, int> s6 = new KeyValuePair<int, int>(19, default(int));
    keyValuePairs[6] = s6;
    KeyValuePair<int, int> s7 = new KeyValuePair<int, int>(14, default(int));
    keyValuePairs[7] = s7;
    KeyValuePair<int, int> s8 = new KeyValuePair<int, int>(15, default(int));
    keyValuePairs[8] = s8;
    this.Add_SeveralValues_CountIsIncrementedByCountOfNewValues<int, int>
        (binaryHeap, keyValuePairs);
}
    }
}
