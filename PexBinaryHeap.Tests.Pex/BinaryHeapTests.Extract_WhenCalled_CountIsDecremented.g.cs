// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using NUnit.Framework;
using Microsoft.Pex.Framework.Generated;

namespace PexBinaryHeap.Tests.Pex
{
    public partial class BinaryHeapTests
    {
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented28()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[1];
    Tuple<int, int> s0 = new Tuple<int, int>(0, 0);
    tuples[0] = s0;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented709()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[2];
    Tuple<int, int> s0 = new Tuple<int, int>(0, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(0, 0);
    tuples[1] = s1;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented456()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[2];
    Tuple<int, int> s0 = new Tuple<int, int>(0, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(1, 0);
    tuples[1] = s1;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented726()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[3];
    Tuple<int, int> s0 = new Tuple<int, int>(257, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(2, 0);
    tuples[1] = s1;
    Tuple<int, int> s2 = new Tuple<int, int>(1, 0);
    tuples[2] = s2;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented649()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[3];
    Tuple<int, int> s0 = new Tuple<int, int>(802, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(802, 0);
    tuples[1] = s1;
    Tuple<int, int> s2 = new Tuple<int, int>(802, 0);
    tuples[2] = s2;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented83()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[4];
    Tuple<int, int> s0 = new Tuple<int, int>(17, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(17, 0);
    tuples[1] = s1;
    Tuple<int, int> s2 = new Tuple<int, int>(0, 0);
    tuples[2] = s2;
    Tuple<int, int> s3 = new Tuple<int, int>(0, 0);
    tuples[3] = s3;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented282()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[5];
    Tuple<int, int> s0 = new Tuple<int, int>(0, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(0, 0);
    tuples[1] = s1;
    Tuple<int, int> s2 = new Tuple<int, int>(0, 0);
    tuples[2] = s2;
    Tuple<int, int> s3 = new Tuple<int, int>(0, 0);
    tuples[3] = s3;
    Tuple<int, int> s4 = new Tuple<int, int>(0, 0);
    tuples[4] = s4;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented92()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[4];
    Tuple<int, int> s0 = new Tuple<int, int>(541, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(540, 0);
    tuples[1] = s1;
    Tuple<int, int> s2 = new Tuple<int, int>(540, 0);
    tuples[2] = s2;
    Tuple<int, int> s3 = new Tuple<int, int>(64, 0);
    tuples[3] = s3;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented908()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[5];
    Tuple<int, int> s0 = new Tuple<int, int>(825, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(818, 0);
    tuples[1] = s1;
    Tuple<int, int> s2 = new Tuple<int, int>(817, 0);
    tuples[2] = s2;
    Tuple<int, int> s3 = new Tuple<int, int>(1, 0);
    tuples[3] = s3;
    Tuple<int, int> s4 = new Tuple<int, int>(0, 0);
    tuples[4] = s4;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented260()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[5];
    Tuple<int, int> s0 = new Tuple<int, int>(0, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(0, 0);
    tuples[1] = s1;
    Tuple<int, int> s2 = new Tuple<int, int>(1, 0);
    tuples[2] = s2;
    Tuple<int, int> s3 = new Tuple<int, int>(0, 0);
    tuples[3] = s3;
    Tuple<int, int> s4 = new Tuple<int, int>(0, 0);
    tuples[4] = s4;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented577()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[8];
    Tuple<int, int> s0 = new Tuple<int, int>(0, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(0, 0);
    tuples[1] = s1;
    Tuple<int, int> s2 = new Tuple<int, int>(0, 0);
    tuples[2] = s2;
    Tuple<int, int> s3 = new Tuple<int, int>(0, 0);
    tuples[3] = s3;
    Tuple<int, int> s4 = new Tuple<int, int>(0, 0);
    tuples[4] = s4;
    Tuple<int, int> s5 = new Tuple<int, int>(0, 0);
    tuples[5] = s5;
    Tuple<int, int> s6 = new Tuple<int, int>(0, 0);
    tuples[6] = s6;
    Tuple<int, int> s7 = new Tuple<int, int>(0, 0);
    tuples[7] = s7;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented921()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[5];
    Tuple<int, int> s0 = new Tuple<int, int>(513, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(0, 0);
    tuples[1] = s1;
    Tuple<int, int> s2 = new Tuple<int, int>(1, 0);
    tuples[2] = s2;
    Tuple<int, int> s3 = new Tuple<int, int>(2, 0);
    tuples[3] = s3;
    Tuple<int, int> s4 = new Tuple<int, int>(0, 0);
    tuples[4] = s4;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void Extract_WhenCalled_CountIsDecremented517()
{
    Tuple<int, int>[] tuples = new Tuple<int, int>[9];
    Tuple<int, int> s0 = new Tuple<int, int>(129, 0);
    tuples[0] = s0;
    Tuple<int, int> s1 = new Tuple<int, int>(260, 0);
    tuples[1] = s1;
    Tuple<int, int> s2 = new Tuple<int, int>(0, 0);
    tuples[2] = s2;
    Tuple<int, int> s3 = new Tuple<int, int>(0, 0);
    tuples[3] = s3;
    Tuple<int, int> s4 = new Tuple<int, int>(0, 0);
    tuples[4] = s4;
    Tuple<int, int> s5 = new Tuple<int, int>(0, 0);
    tuples[5] = s5;
    Tuple<int, int> s6 = new Tuple<int, int>(0, 0);
    tuples[6] = s6;
    Tuple<int, int> s7 = new Tuple<int, int>(0, 0);
    tuples[7] = s7;
    Tuple<int, int> s8 = new Tuple<int, int>(0, 0);
    tuples[8] = s8;
    this.Extract_WhenCalled_CountIsDecremented<int, int>(tuples);
}
    }
}
