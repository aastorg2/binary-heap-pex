// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using NUnit.Framework;
using Microsoft.Pex.Framework.Generated;
using System.Collections.Generic;

namespace PexBinaryHeap.Tests.Pex
{
    public partial class BinaryHeapTests
    {
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void ExtractFirst_WhenCalled_CountIsDecremented731()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[1];
    this.ExtractFirst_WhenCalled_CountIsDecremented<int, int>(keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void ExtractFirst_WhenCalled_CountIsDecremented709()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[2];
    this.ExtractFirst_WhenCalled_CountIsDecremented<int, int>(keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void ExtractFirst_WhenCalled_CountIsDecremented419()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[3];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[1] = s0;
    this.ExtractFirst_WhenCalled_CountIsDecremented<int, int>(keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void ExtractFirst_WhenCalled_CountIsDecremented672()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[4];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[1] = s0;
    this.ExtractFirst_WhenCalled_CountIsDecremented<int, int>(keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void ExtractFirst_WhenCalled_CountIsDecremented991()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[4];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(256, default(int));
    keyValuePairs[0] = s0;
    KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(578, default(int));
    keyValuePairs[1] = s1;
    KeyValuePair<int, int> s2 = new KeyValuePair<int, int>(80, default(int));
    keyValuePairs[2] = s2;
    KeyValuePair<int, int> s3 = new KeyValuePair<int, int>(65, default(int));
    keyValuePairs[3] = s3;
    this.ExtractFirst_WhenCalled_CountIsDecremented<int, int>(keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void ExtractFirst_WhenCalled_CountIsDecremented756()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[5];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[1] = s0;
    this.ExtractFirst_WhenCalled_CountIsDecremented<int, int>(keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void ExtractFirst_WhenCalled_CountIsDecremented904()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[7];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[1] = s0;
    this.ExtractFirst_WhenCalled_CountIsDecremented<int, int>(keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void ExtractFirst_WhenCalled_CountIsDecremented724()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[8];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[1] = s0;
    this.ExtractFirst_WhenCalled_CountIsDecremented<int, int>(keyValuePairs);
}
[Test]
[PexGeneratedBy(typeof(BinaryHeapTests))]
public void ExtractFirst_WhenCalled_CountIsDecremented434()
{
    KeyValuePair<int, int>[] keyValuePairs = new KeyValuePair<int, int>[11];
    KeyValuePair<int, int> s0 = new KeyValuePair<int, int>(577, default(int));
    keyValuePairs[0] = s0;
    KeyValuePair<int, int> s1 = new KeyValuePair<int, int>(704, default(int));
    keyValuePairs[1] = s1;
    KeyValuePair<int, int> s2 = new KeyValuePair<int, int>(514, default(int));
    keyValuePairs[2] = s2;
    KeyValuePair<int, int> s3 = new KeyValuePair<int, int>(228, default(int));
    keyValuePairs[3] = s3;
    KeyValuePair<int, int> s4 = new KeyValuePair<int, int>(209, default(int));
    keyValuePairs[4] = s4;
    KeyValuePair<int, int> s5 = new KeyValuePair<int, int>(142, default(int));
    keyValuePairs[5] = s5;
    KeyValuePair<int, int> s6 = new KeyValuePair<int, int>(45, default(int));
    keyValuePairs[6] = s6;
    KeyValuePair<int, int> s7 = new KeyValuePair<int, int>(28, default(int));
    keyValuePairs[7] = s7;
    KeyValuePair<int, int> s8 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[8] = s8;
    KeyValuePair<int, int> s9 = new KeyValuePair<int, int>(1, default(int));
    keyValuePairs[9] = s9;
    KeyValuePair<int, int> s10 = new KeyValuePair<int, int>(44, default(int));
    keyValuePairs[10] = s10;
    this.ExtractFirst_WhenCalled_CountIsDecremented<int, int>(keyValuePairs);
}
    }
}
